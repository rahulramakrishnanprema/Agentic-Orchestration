apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-flow
  namespace: agent-flow
  labels:
    app: agent-flow
spec:
  replicas: 2
  selector:
    matchLabels:
      app: agent-flow
  template:
    metadata:
      labels:
        app: agent-flow
    spec:
      containers:
      - name: agent-flow
        image: gcr.io/YOUR_PROJECT_ID/agent-flow:latest
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 5173
          name: ui
        env:
        # Config from ConfigMap
        - name: UI_HOST
          valueFrom:
            configMapKeyRef:
              name: agent-flow-config
              key: UI_HOST
        - name: UI_PORT
          valueFrom:
            configMapKeyRef:
              name: agent-flow-config
              key: UI_PORT
        - name: REACT_DEV_PORT
          valueFrom:
            configMapKeyRef:
              name: agent-flow-config
              key: REACT_DEV_PORT
        - name: MAX_REBUILD_ATTEMPTS
          valueFrom:
            configMapKeyRef:
              name: agent-flow-config
              key: MAX_REBUILD_ATTEMPTS
        - name: REVIEW_THRESHOLD
          valueFrom:
            configMapKeyRef:
              name: agent-flow-config
              key: REVIEW_THRESHOLD
        - name: GOT_SCORE_THRESHOLD
          valueFrom:
            configMapKeyRef:
              name: agent-flow-config
              key: GOT_SCORE_THRESHOLD
        - name: HITL_TIMEOUT_SECONDS
          valueFrom:
            configMapKeyRef:
              name: agent-flow-config
              key: HITL_TIMEOUT_SECONDS
        - name: OPENROUTE_API_URL
          valueFrom:
            configMapKeyRef:
              name: agent-flow-config
              key: OPENROUTE_API_URL
        - name: SONAR_HOST_URL
          valueFrom:
            configMapKeyRef:
              name: agent-flow-config
              key: SONAR_HOST_URL
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: agent-flow-config
              key: LOG_LEVEL
        - name: MONGODB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: agent-flow-config
              key: MONGODB_DATABASE
        - name: MONGODB_COLLECTION
          valueFrom:
            configMapKeyRef:
              name: agent-flow-config
              key: MONGODB_COLLECTION
        # Secrets
        - name: OPENROUTE_API_KEY
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: OPENROUTE_API_KEY
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: GITHUB_TOKEN
        - name: JIRA_TOKEN
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: JIRA_TOKEN
        - name: JIRA_SERVER
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: JIRA_SERVER
        - name: JIRA_EMAIL
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: JIRA_EMAIL
        - name: PROJECT_KEY
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: PROJECT_KEY
        - name: MONGODB_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: MONGODB_CONNECTION_STRING
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: SONAR_TOKEN
        - name: LLM_MODEL
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: LLM_MODEL
        - name: GOT_LLM_MODEL
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: GOT_LLM_MODEL
        - name: GITHUB_REPO_OWNER
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: GITHUB_REPO_OWNER
        - name: GITHUB_REPO_NAME
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: GITHUB_REPO_NAME
        - name: SONAR_ORG
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: SONAR_ORG
        - name: SONAR_PROJECT_KEY
          valueFrom:
            secretKeyRef:
              name: agent-flow-secrets
              key: SONAR_PROJECT_KEY
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: agent-flow-service
  namespace: agent-flow
  labels:
    app: agent-flow
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 5173
    targetPort: 5173
    protocol: TCP
    name: ui
  selector:
    app: agent-flow
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: agent-flow-hpa
  namespace: agent-flow
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: agent-flow
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
# GCP Deployment Configuration for Agent-Flow

## Deployment Options

This application can be deployed on GCP using multiple services:
1. **Cloud Run** (Recommended - Serverless, auto-scaling)
2. **Google Kubernetes Engine (GKE)** (For complex orchestration)
3. **App Engine** (Managed platform)
4. **Compute Engine** (Full VM control)

---

## Option 1: Cloud Run (Recommended)

### Prerequisites
- Google Cloud SDK installed
- GCP Project with billing enabled
- Docker installed locally

### Steps

1. **Set up GCP Project**
```bash
gcloud config set project YOUR_PROJECT_ID
gcloud auth login
```

2. **Enable required APIs**
```bash
gcloud services enable cloudbuild.googleapis.com
gcloud services enable run.googleapis.com
gcloud services enable secretmanager.googleapis.com
```

3. **Create secrets for sensitive data**
```bash
# Create secrets from your .env file
gcloud secrets create OPENROUTE_API_KEY --data-file=<(echo -n "YOUR_API_KEY")
gcloud secrets create GITHUB_TOKEN --data-file=<(echo -n "YOUR_GITHUB_TOKEN")
gcloud secrets create JIRA_TOKEN --data-file=<(echo -n "YOUR_JIRA_TOKEN")
gcloud secrets create MONGODB_CONNECTION_STRING --data-file=<(echo -n "YOUR_MONGODB_URI")
gcloud secrets create SONAR_TOKEN --data-file=<(echo -n "YOUR_SONAR_TOKEN")
```

4. **Build and deploy using cloudbuild.yaml**
```bash
gcloud builds submit --config cloudbuild.yaml
```

5. **Or build and deploy manually**
```bash
# Build the image
gcloud builds submit --tag gcr.io/YOUR_PROJECT_ID/agent-flow

# Deploy to Cloud Run
gcloud run deploy agent-flow \
  --image gcr.io/YOUR_PROJECT_ID/agent-flow \
  --platform managed \
  --region us-central1 \
  --allow-unauthenticated \
  --port 8080 \
  --memory 2Gi \
  --cpu 2 \
  --timeout 3600 \
  --set-env-vars="UI_HOST=0.0.0.0,REACT_DEV_PORT=5173" \
  --set-secrets="OPENROUTE_API_KEY=OPENROUTE_API_KEY:latest,GITHUB_TOKEN=GITHUB_TOKEN:latest,JIRA_TOKEN=JIRA_TOKEN:latest,MONGODB_CONNECTION_STRING=MONGODB_CONNECTION_STRING:latest,SONAR_TOKEN=SONAR_TOKEN:latest"
```

---

## Option 2: Google Kubernetes Engine (GKE)

### Prerequisites
- kubectl installed
- GKE cluster created

### Steps

1. **Create GKE Cluster**
```bash
gcloud container clusters create agent-flow-cluster \
  --num-nodes=3 \
  --machine-type=e2-standard-4 \
  --region=us-central1 \
  --enable-autoscaling \
  --min-nodes=1 \
  --max-nodes=5
```

2. **Get cluster credentials**
```bash
gcloud container clusters get-credentials agent-flow-cluster --region=us-central1
```

3. **Create Kubernetes secrets**
```bash
kubectl create secret generic agent-flow-secrets \
  --from-literal=OPENROUTE_API_KEY='YOUR_KEY' \
  --from-literal=GITHUB_TOKEN='YOUR_TOKEN' \
  --from-literal=JIRA_TOKEN='YOUR_TOKEN' \
  --from-literal=MONGODB_CONNECTION_STRING='YOUR_URI' \
  --from-literal=SONAR_TOKEN='YOUR_TOKEN'
```

4. **Apply Kubernetes configurations**
```bash
kubectl apply -f k8s/
```

5. **Get external IP**
```bash
kubectl get service agent-flow-service
```

---

## Option 3: App Engine

### Steps

1. **Initialize App Engine**
```bash
gcloud app create --region=us-central
```

2. **Create secrets in Secret Manager**
```bash
# Same as Cloud Run step 3
```

3. **Deploy**
```bash
gcloud app deploy app.yaml
```

---

## Option 4: Compute Engine (VM)

### Steps

1. **Create VM instance**
```bash
gcloud compute instances create agent-flow-vm \
  --machine-type=e2-standard-4 \
  --image-family=ubuntu-2204-lts \
  --image-project=ubuntu-os-cloud \
  --boot-disk-size=50GB \
  --tags=http-server,https-server \
  --zone=us-central1-a
```

2. **SSH into VM**
```bash
gcloud compute ssh agent-flow-vm --zone=us-central1-a
```

3. **Install Docker and Docker Compose**
```bash
sudo apt-get update
sudo apt-get install -y docker.io docker-compose git
sudo usermod -aG docker $USER
```

4. **Clone repository and deploy**
```bash
git clone YOUR_REPO_URL
cd Agent-flow
cp .env.example .env
# Edit .env with your credentials
nano .env

# Start with Docker Compose
sudo docker-compose up -d
```

5. **Configure firewall**
```bash
gcloud compute firewall-rules create allow-agent-flow \
  --allow=tcp:8080,tcp:5173 \
  --target-tags=http-server
```

---

## Environment Variables for GCP

Create these in Secret Manager or as environment variables:

```bash
# LLM Configuration
LLM_MODEL=deepseek/deepseek-v3:free
GOT_LLM_MODEL=deepseek/deepseek-v3:free
OPENROUTE_API_KEY=your_key_here
OPENROUTE_API_URL=https://openrouter.ai/api/v1/chat/completions

# UI Configuration
UI_HOST=0.0.0.0
UI_PORT=8080
REACT_DEV_PORT=5173

# GitHub
GITHUB_TOKEN=your_token
GITHUB_REPO_OWNER=your_username
GITHUB_REPO_NAME=your_repo

# Jira
JIRA_SERVER=https://your-domain.atlassian.net
JIRA_EMAIL=your_email
JIRA_TOKEN=your_token
PROJECT_KEY=YOUR_KEY

# MongoDB (Use MongoDB Atlas for production)
MONGODB_CONNECTION_STRING=mongodb+srv://user:pass@cluster.mongodb.net/

# SonarQube
SONAR_TOKEN=your_token
SONAR_ORG=your_org
SONAR_PROJECT_KEY=your_key
SONAR_HOST_URL=https://sonarcloud.io
```

---

## Cost Optimization

1. **Cloud Run**: Pay per request, auto-scales to zero
   - Best for: Variable workloads
   - Cost: ~$0.00002400 per request

2. **GKE**: Kubernetes cluster management
   - Best for: Complex microservices
   - Cost: Cluster fees + node costs

3. **App Engine**: Managed platform
   - Best for: Simple web apps
   - Cost: Instance hours

4. **Compute Engine**: Virtual machines
   - Best for: Full control needed
   - Cost: VM per hour

---

## Monitoring and Logging

Enable Cloud Monitoring and Logging:
```bash
gcloud services enable monitoring.googleapis.com
gcloud services enable logging.googleapis.com
```

View logs:
```bash
# Cloud Run
gcloud run logs read agent-flow --region=us-central1

# GKE
kubectl logs -f deployment/agent-flow

# App Engine
gcloud app logs tail

# Compute Engine
gcloud compute ssh agent-flow-vm --command "docker logs agent-flow"
```

---

## Scaling Configuration

### Cloud Run
```bash
gcloud run services update agent-flow \
  --min-instances=1 \
  --max-instances=10 \
  --concurrency=80
```

### GKE
```bash
kubectl autoscale deployment agent-flow \
  --cpu-percent=70 \
  --min=2 \
  --max=10
```

---

## Backup and Disaster Recovery

1. **Database Backups**: Use MongoDB Atlas automated backups
2. **Application Backups**: Store in Cloud Storage
3. **Secrets Rotation**: Rotate secrets regularly in Secret Manager

---

## Troubleshooting

### Check service status
```bash
# Cloud Run
gcloud run services describe agent-flow --region=us-central1

# GKE
kubectl get pods
kubectl describe pod POD_NAME

# Check logs
gcloud logging read "resource.type=cloud_run_revision"
```

### Common Issues
1. **Port mismatch**: Ensure PORT env var matches container port
2. **Memory limits**: Increase memory allocation if OOM errors
3. **Timeout**: Increase timeout for long-running tasks
4. **Secrets**: Verify secret manager permissions

